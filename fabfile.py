import csv
import json

from fabric import task

from benchmark.instance import InstanceManager
from benchmark.local import LocalBench
from benchmark.logs import LogParser, ParseError
from benchmark.mechanisms.bullshark import BullsharkLogParser
from benchmark.mechanisms.cometbft import CometBftLogParser
from benchmark.mechanisms.hotstuff import HotStuffLogParser
from benchmark.plot import Ploter, PlotError
from benchmark.remote import Bench, BenchError
from benchmark.utils import Print

# Open the JSON file and load its contents
with open("fab-params.json") as f:
    params_data = json.load(f)


@task
def local(ctx):
    """Run benchmarks on localhost"""
    bench_params = {
        "faults": 0,
        "nodes": 4,
        "rate": 1_000,
        "tx_size": 512,
        "duration": 20,
    }
    node_params = {
        "consensus": {
            "timeout_delay": 1_000,
            "sync_retry_delay": 10_000,
        },
        "mempool": {
            "gc_depth": 50,
            "sync_retry_delay": 5_000,
            "sync_retry_nodes": 3,
            "batch_size": 15_000,
            "max_batch_delay": 10,
        },
    }
    try:
        ret = LocalBench(bench_params, node_params).run(debug=True).result()
        print(ret)
    except BenchError as e:
        Print.error(e)


@task
def create(ctx, nodes=2):
    """Create a testbed"""
    try:
        InstanceManager.make().create_instances(nodes)
    except BenchError as e:
        Print.error(e)


@task
def destroy(ctx):
    """Destroy the testbed"""
    try:
        InstanceManager.make().terminate_instances()
    except BenchError as e:
        Print.error(e)


@task
def start(ctx, max=2):
    """Start at most `max` machines per data center"""
    try:
        InstanceManager.make().start_instances(max)
    except BenchError as e:
        Print.error(e)


@task
def stop(ctx):
    """Stop all machines"""
    try:
        InstanceManager.make().stop_instances()
    except BenchError as e:
        Print.error(e)


@task
def info(ctx, mech):
    """Display connect information about all the available machines"""
    try:
        InstanceManager.make(mech).print_info()
    except BenchError as e:
        Print.error(e)


@task
def install(ctx, mech):
    """Install the codebase on all machines"""
    try:
        Bench(ctx, mech).install()
    except BenchError as e:
        Print.error(e)


@task
def remote(ctx, mech):
    """Run benchmarks on a cluster"""

    bench_params = params_data["remote"][mech]["bench_params"]
    node_params = params_data["remote"][mech]["node_params"]

    try:
        Bench(ctx, mech).run(bench_params, node_params, False, debug=True)
    except BenchError as e:
        Print.error(e)


@task
def georemote(ctx, mech):
    """Run benchmarks on ComputeCanada/AWS with geospatial latency simulation"""
    bench_params = params_data["remote"][mech]["bench_params"]
    node_params = params_data["remote"][mech]["node_params"]

    try:
        Bench(ctx, mech).run(bench_params, node_params, True, debug=True)
    except BenchError as e:
        Print.error(e)


@task
def plot(ctx):
    """Plot performance using the logs generated by "fab remote" """
    plot_params = {"faults": [0], "nodes": [10, 20, 50], "tx_size": 32, "max_latency": [2_000, 5_000]}
    try:
        Ploter.plot(plot_params)
    except PlotError as e:
        Print.error(BenchError("Failed to plot performance", e))


@task
def kill(ctx, mech):
    """Stop any HotStuff execution on all machines"""
    try:
        Bench(ctx, mech).kill()
    except BenchError as e:
        Print.error(e)


@task
def logs(ctx, mech):
    """Print a summary of the logs"""
    try:
        logParser = LogParser()
        logParser.log_parser(mech, "./logs")
        print(logParser.result())

    except ParseError as e:
        Print.error(BenchError("Failed to parse logs", e))
